<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=11" />
<title>[Files] section</title>
<link rel="stylesheet" type="text/css" href="styles.css" />
<script type="text/javascript" src="topic.js"></script>
</head>
<body>
<h1 class="topicheading">[Files] section</h1>
<div class="topicbody">

<p>This optional section defines any files Setup is to install on the user's system.</p>

<p>Here is an example of a <tt>[Files]</tt> section:</p>

<pre class="indent examplebox">
[Files]
Source: "MyProg.exe"; DestDir: "{app}"
Source: "MyProg.chm"; DestDir: "{app}"
Source: "Readme.txt"; DestDir: "{app}"; Flags: isreadme
</pre>

<p>See the <i>Remarks</i> section at the bottom of this topic for some important notes.</p>

<p>The following is a list of the supported <a href="topic_params.htm">parameters</a>:</p>

<dl>

<dt class="paramlist"><b><span id="Source">Source</span></b> &nbsp;<i>(Required)</i></dt><dd class="paramlist">
<p>The name of the <i>source file</i>. The compiler will prepend the path of your installation's <a href="topic_sourcedirectorynotes.htm">source directory</a> if you do not specify a fully qualified pathname.</p>
<p>This can be a wildcard to specify a group of files in a single entry. When a wildcard is used, all files matching it use the same options.</p>
<p>When the flag <tt>external</tt> is specified but the flag <tt>download</tt> is not, <tt>Source</tt> must be the full pathname of an existing file (or wildcard) on the distribution media or the user's system (e.g. "{src}\license.ini").</p>
<p>When the flag <tt>external</tt> is specified and the flag <tt>download</tt> is also, <tt>Source</tt> must be the URL of the file to download.</p>
<p>Constants may only be used when the <tt>external</tt> flag is specified, because the compiler does not do any constant translating itself.</p>
<div class="examplebox">
<div class="exampleheader">Examples:</div>
<pre class="nomargin">
Source: "MyProg.exe"
Source: "Files\*"
</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="DestDir">DestDir</span></b> &nbsp;<i>(Required)</i></dt><dd class="paramlist">
<p>The directory where the file is to be installed on the user's system. Will almost always begin with one of the directory constants. If the specified path does not already exist on the user's system, it will be created automatically, and removed automatically during uninstallation if empty.</p>
<div class="examplebox">
<div class="exampleheader">Examples:</div>
<pre class="nomargin">
DestDir: "{app}"
DestDir: "{app}\subdir"
</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="DestName">DestName</span></b></dt><dd class="paramlist">
<p>This parameter specifies a new name for the file when it is installed on the user's system. By default, Setup uses the name from the <tt>Source</tt> parameter, so in most cases it's not necessary to specify this parameter.</p>
<div class="examplebox">
<div class="exampleheader">Example:</div>
<pre class="nomargin">DestName: "MYPROG2.EXE"</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="Excludes">Excludes</span></b></dt><dd class="paramlist">
<p>Specifies a list of patterns to exclude, separated by commas.</p>
<p>Patterns may include wildcard characters ("*" and "?"). Note that unlike the <tt>Source</tt> parameter, a simple Unix-style pattern matching routine is used for <tt>Excludes</tt>. Dots in the pattern are always significant, thus "*.*" will not exclude a file with no extension (instead, use just "*"). Also, question marks always match exactly one character, thus "?????" will not exclude files with names less than five characters long.</p>
<p>If a pattern starts with a backslash ("\") it is matched against the start of a path name, otherwise it is matched against the end of a path name. Thus "\foo" will only exclude a file named "foo" at the base of the tree. On the other hand, "foo" will exclude any file named "foo" anywhere in the tree.</p>
<p>The patterns may include backslashes. "foo\bar" will exclude both "foo\bar" and "subdir\foo\bar". "\foo\bar" will only exclude "foo\bar".</p>
<div class="examplebox">
<div class="exampleheader">Examples:</div>
<pre class="nomargin">
Source: "*"; Excludes: "*.~*"
Source: "*"; Excludes: "*.~*,\Temp\*"; Flags: recursesubdirs
</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="ExternalSize">ExternalSize</span></b></dt><dd class="paramlist">
<p>This parameter must be combined with the <tt>external</tt> flag and specifies the size of the external file in bytes. If this parameter is not specified, Setup retrieves the file size at startup. Primarily useful for files that aren't available at startup, for example files located on a second disk when <a href="topic_setup_diskspanning.htm">disk spanning</a> is being used.</p>
<p>If the specified size does not match the actual size, Setup's progress bar will automatically adjust by skipping ahead or pausing as needed during installation.</p>
<p>If the <tt>extractarchive</tt> flag is also used, the total uncompressed size of all extracted files must be specified.</p>
<p>Supports digit separators and set in bytes. (1048576 bytes = 1 megabyte)</p>
<div class="examplebox">
<div class="exampleheader">Example:</div>
<pre class="nomargin">
ExternalSize: 1_048_576; Flags: external
</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="Attribs">Attribs</span></b></dt><dd class="paramlist">
<p>Specifies additional attributes for the file. This can include one or more of the following: <tt>readonly</tt>, <tt>hidden</tt>, <tt>system</tt>, <tt>notcontentindexed</tt>. If this parameter is not specified, Setup does not assign any special attributes to the file.</p>
<div class="examplebox">
<div class="exampleheader">Example:</div>
<pre class="nomargin">Attribs: hidden system</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="Permissions">Permissions</span></b></dt><dd class="paramlist">
<p>Specifies additional permissions to grant in the file's ACL (access control list). It is not recommended that you use this parameter if you aren't familiar with ACLs or why you would need to change them, because misusing it could negatively impact system security.</p>
<p>For this parameter to have an effect the file must be located on a partition that supports ACLs (such as NTFS), and the current user must be able to change the permissions on the file. In the event these conditions are not met, no error message will be displayed, and the permissions will not be set.</p>
<p>This parameter should <i>only</i> be used on files private to your application. Never change the ACLs on shared system files, otherwise you can open up security holes on your users' systems.</p>
<p>The specified permissions are set regardless of whether the file existed prior to installation.</p>
<p>This parameter can include one or more space separated values in the format:</p>
<div class="indent"><p><tt><a href="topic_usergroupids.htm">&lt;user or group identifier&gt;</a>-&lt;access type&gt;</tt></p></div>
<p>The following access types are supported for the [Files] section:</p>
<dl>
<dt class="flaglist"><span id="full">full</span></dt>
<dd>
<p>Grants "Full Control" permission, which is the same as <tt>modify</tt> (see below), but additionally allows the specified user/group to take ownership of the file and change its permissions. Use sparingly; generally, <tt>modify</tt> is sufficient.</p>
</dd>
<dt class="flaglist"><span id="modify">modify</span></dt>
<dd>
<p>Grants "Modify" permission, which allows the specified user/group to read, execute, modify, and delete the file.</p>
</dd>
<dt class="flaglist"><span id="readexec">readexec</span></dt>
<dd>
<p>Grants "Read &amp; Execute" permission, which allows the specified user/group to read and execute the file.</p>
</dd>
</dl>
<div class="examplebox">
<div class="exampleheader">Example:</div>
<pre class="nomargin">Permissions: users-modify</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="FontInstall">FontInstall</span></b></dt><dd class="paramlist">
<p>Tells Setup the file is a font that needs to be installed. The value of this parameter is the name of the font as stored in the registry or WIN.INI. This must be exactly the same name as you see when you double-click the font file in Explorer. Note that Setup will automatically append " (TrueType)" to the end of the name.</p>
<p>If the file is not a TrueType font, you must specify the flag <tt>fontisnttruetype</tt> in the Flags parameter.</p>
<p>It's recommended that you use the flags <tt>onlyifdoesntexist</tt> and <tt>uninsneveruninstall</tt> when installing fonts to the <tt>{autofonts}</tt> directory.</p>
<p>If the installation is running in <a href="topic_admininstallmode.htm">non administrative install mode</a>, Windows 10 Version 1803 or later is required to successfully install a font.</p>
<p>For compatibility with 64-bit Windows, fonts should not be installed to the <tt>{sys}</tt> directory. Use <tt>{autofonts}</tt> as the destination directory instead.</p>
<div class="examplebox">
<div class="exampleheader">Example:</div>
<pre class="nomargin">Source: "OZHANDIN.TTF"; DestDir: "{autofonts}"; FontInstall: "Oz Handicraft BT"; Flags: onlyifdoesntexist uninsneveruninstall</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="StrongAssemblyName">StrongAssemblyName</span></b></dt><dd class="paramlist">
<p>Specifies the strong assembly name of the file. Used by Uninstall only.</p>
<p>This parameter is ignored if the <tt>gacinstall</tt> flag isn't also specified.</p>
<div class="examplebox">
<div class="exampleheader">Example:</div>
<pre class="nomargin">StrongAssemblyName: "MyAssemblyName, Version=1.0.0.0, Culture=neutral, PublicKeyToken=abcdef123456, ProcessorArchitecture=MSIL"</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="ISSigAllowedKeys">ISSigAllowedKeys</span></b></dt><dd class="paramlist">
<p>A space separated list of key names or group names from the <a href="topic_issigkeyssection.htm">[ISSigKeys] section</a>, specifying which keys are allowed for the verification done by the <tt>issigverify</tt> flag.</p>
<div class="examplebox">
<div class="exampleheader">Example:</div>
<pre class="nomargin">ISSigAllowedKeys: "exesigner bosskey"</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="Hash">Hash</span></b></dt><dd class="paramlist">
<p>Instructs the compiler or Setup to do a simple SHA-256 hash check instead of a full signature verification, as an alternative to using the <tt>issigverify</tt> flag. The precise effect of this parameter depends on whether it is combined with the <tt>external</tt> flag. See the <tt>issigverify</tt> flag description for more information.</p>
<div class="examplebox">
<div class="exampleheader">Example:</div>
<pre class="nomargin">Hash: "2f6294f9aa09f59a574b5dcd33be54e16b39377984f3d5658cda44950fa0f8fc"</pre>
</div>
</dd>

<dt class="paramlist"><b><span id="ExtractArchivePassword">ExtractArchivePassword</span></b></dt><dd class="paramlist">
<p>Specifies the password of the archive, which can include constants. Please be aware that this password is stored in an unencrypted form in the resulting Setup file(s), even if you have enabled encryption (using the [Setup] section directive <tt>Encryption</tt>).</p>
<p>This parameter is ignored if the <tt>extractarchive</tt> flag isn't also specified.</p>
</dd>

<dt class="paramlist"><b><span id="DownloadISSigSource">DownloadISSigSource</span></b></dt><dd class="paramlist">
<p>Specifies the URL of the .issig signature file which should be downloaded, which can include constants. This file is used to verify the file downloaded from the URL specified by the <tt>Source</tt> parameter.</p>
<p>This parameter is ignored if the <tt>download</tt> and <tt>issigverify</tt> flags aren't both also specified.</p>
<p>If this parameter is not set but both these flags are used, Setup will instead append ".issig" (without quotes) to the path portion of the URL specified by the <tt>Source</tt> parameter. It will then use the result as the URL to download the .issig signature file from.</p>
</dd>

<dt class="paramlist"><b><span id="DownloadUserName">DownloadUserName</span></b></dt><dd class="paramlist">
<p>Specifies the basic authentication username to use for the file download, which can include constants.</p>
<p>This parameter is ignored if the <tt>download</tt> flag isn't also specified.</p>
</dd>

<dt class="paramlist"><b><span id="DownloadPassword">DownloadPassword</span></b></dt><dd class="paramlist">
<p>Specifies the basic authentication password to use for the file download, which can include constants. Please be aware that this password is stored in an unencrypted form in the resulting Setup file(s), even if you have enabled encryption (using the [Setup] section directive <tt>Encryption</tt>).</p>
<p>This parameter is ignored if the <tt>download</tt> flag isn't also specified.</p>
</dd>

<dt class="paramlist"><b><span id="Flags">Flags</span></b></dt><dd class="paramlist">
<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces. The following options are supported:</p>

<dl>
<dt class="flaglist"><span id="32bit">32bit</span></dt>
<dd>
<p>Causes the <tt>{sys}</tt> constant to map to the 32-bit System directory when used in the <tt>Source</tt> and <tt>DestDir</tt> parameters, the <tt>regserver</tt> and <tt>regtypelib</tt> flags to treat the file as 32-bit, and the <tt>sharedfile</tt> flag to update the 32-bit SharedDLLs registry key. This is the default behavior in <a href="topic_32vs64bitinstalls.htm">32-bit install mode</a>.</p>
</dd>
<dt class="flaglist"><span id="64bit">64bit</span></dt>
<dd>
<p>Causes the <tt>{sys}</tt> constant to map to the 64-bit System directory when used in the <tt>Source</tt> and <tt>DestDir</tt> parameters, the <tt>regserver</tt> and <tt>regtypelib</tt> flags to treat the file as 64-bit, and the <tt>sharedfile</tt> flag to update the 64-bit SharedDLLs registry key. This is the default behavior in <a href="topic_32vs64bitinstalls.htm">64-bit install mode</a>.</p>
</dd>
<dt class="flaglist"><span id="allowunsafefiles">allowunsafefiles</span></dt>
<dd>
<p>Disables the compiler's automatic checking for <a href="topic_unsafefiles.htm">unsafe files</a>. It is strongly recommended that you DO NOT use this flag, unless you are absolutely sure you know what you're doing.</p>
</dd>
<dt class="flaglist"><span id="comparetimestamp">comparetimestamp</span></dt>
<dd>
<p><i>(Not recommended; see below)</i><br/>
Instructs Setup to proceed to comparing time stamps (last write/modified time) if the file being installed already exists on the user's system, and at least one of the following conditions is true:</p>
<ul>
<li>Neither the existing file nor the file being installed has version info.</li>
<li>The <tt>ignoreversion</tt> flag is also used on the entry.</li>
<li>The <tt>replacesameversion</tt> flag isn't used, and the existing file and the file being installed have the same version number (as determined by the files' version info).</li>
</ul>
<p>If the existing file has an older time stamp (last write/modified time) than the file being installed, the existing file will replaced. Otherwise, it will not be replaced.</p>
<p>Use of this flag is <i>not recommended</i> except as a last resort, because there is an inherent issue with it: NTFS partitions store time stamps in UTC (unlike FAT partitions), which causes local time stamps -- what Inno Setup works with by default -- to shift whenever a user changes their system's time zone or when daylight saving time goes into or out of effect. This can create a situation where files are replaced when the user doesn't expect them to be, or not replaced when the user expects them to be.</p>
</dd>
<dt class="flaglist"><span id="confirmoverwrite">confirmoverwrite</span></dt>
<dd>
<p>Always ask the user to confirm before replacing an existing file.</p>
</dd>
<dt class="flaglist"><span id="createallsubdirs">createallsubdirs</span></dt>
<dd>
<p>By default the compiler skips empty directories when it recurses subdirectories searching for the <tt>Source</tt> filename/wildcard. This flag causes these directories to be created at install time (just like if you created [Dirs] entries for them).</p>
<p>This flag must be combined with <tt>recursesubdirs</tt>.</p>
</dd>
<dt class="flaglist"><span id="deleteafterinstall">deleteafterinstall</span></dt>
<dd>
<p>Instructs Setup to install the file as usual, but then delete it once the installation is completed (or aborted). This can be useful for extracting temporary data needed by a program executed in the script's [Run] section.</p>
<p>This flag will not cause existing files that weren't replaced during installation to be deleted.</p>
<p>This flag cannot be combined with the <tt>isreadme</tt>, <tt>regserver</tt>, <tt>regtypelib</tt>, <tt>restartreplace</tt>, <tt>sharedfile</tt>, or <tt>uninsneveruninstall</tt> flags.</p>
</dd>
<dt class="flaglist"><span id="dontcopy">dontcopy</span></dt>
<dd>
<p>Don't copy the file to the user's system during the normal file copying stage but do statically compile the file into the installation. This flag is useful if the file is handled by the [Code] section exclusively and extracted using <a href="topic_isxfunc_extracttemporaryfile.htm">ExtractTemporaryFile</a>.</p>
</dd>
<dt class="flaglist"><span id="dontverifychecksum">dontverifychecksum</span></dt>
<dd>
<p>Prevents Setup from verifying the file checksum after extraction. Use this flag on files you wish to modify while already compiled into Setup.</p>
<p>Must be combined with <tt>nocompression</tt>.</p>
</dd>
<dt class="flaglist"><span id="download">download</span></dt>
<dd>
<p>This flag instructs Setup not to copy an existing file, but instead to download it. Optionally use the <tt>DownloadUserName</tt> and <tt>DownloadPassword</tt> parameters to specify a basic authentication username and password.</p>
<p>This flag must be combined with the <tt>DestName</tt> and <tt>ExternalSize</tt> parameters. When <tt>download</tt> is combined with <tt>extractarchive</tt>, the value of <tt>DestName</tt> is used to determine the archive format and for display and logging purposes.</p>
<p>This flag also must be combined with the <tt>external</tt> and <tt>ignoreversion</tt> flags, meaning it should only be used on files private to your application, <i>never</i> on shared system files.</p>
<p>This flag cannot be combined with the <tt>comparetimestamp</tt> and <tt>skipifsourcedoesntexist</tt> flags.</p>
<p>Supports HTTPS (but not expired or self-signed certificates) and HTTP. Redirects are automatically followed and proxy settings are automatically used. Safe to use from services.</p>
</dd>
<dt class="flaglist"><span id="external">external</span></dt>
<dd>
<p>This flag instructs Inno Setup not to statically compile the file specified by the <tt>Source</tt> parameter into the installation files, but instead to copy from an existing file on the distribution media or the user's system. See the <tt>Source</tt> parameter description for more information.</p>
<p>When combined with the <tt>download</tt> or <tt>extractarchive</tt> flags, Setup does not copy the file, but instead downloads or extracts it.</p>
</dd>
<dt class="flaglist"><span id="extractarchive">extractarchive</span></dt>
<dd>
<p>This flag instructs Setup not to copy an existing archive file, but instead to extract it. Optionally use the <tt>ExtractArchivePassword</tt> parameter to specify a password.</p>
<p>The supported archive formats, beyond .7z, and the support for password-protected and multi-volume archives, depend on the <a href="topic_setup_archiveextraction.htm">ArchiveExtraction</a> [Setup] section directive, that must not be set to <tt>basic</tt>.</p>
<p>To allow the extraction of archives with custom extensions, such as self-extracting archives, call <a href="topic_isxfunc_maparchiveextensions.htm">MapArchiveExtensions</a>.</p>
<p>This flag must be combined with the <tt>external</tt> and <tt>ignoreversion</tt> flags, meaning it should only be used on files private to your application, <i>never</i> on shared system files.</p>
<p>This flag is usually combined with the <tt>recursesubdirs</tt> and <tt>createallsubdirs</tt> flags.</p>
<p>Using a solid archive is not recommended; extraction performance may degrade depending on the solid block size.</p>
</dd>
<dt class="flaglist"><span id="fontisnttruetype">fontisnttruetype</span></dt>
<dd>
<p>Specify this flag if the entry is installing a <i>non-TrueType</i> font with the <tt>FontInstall</tt> parameter.</p>
</dd>
<dt class="flaglist"><span id="gacinstall">gacinstall</span></dt>
<dd>
<p>Install the file into the .NET Global Assembly Cache. When used in combination with <tt>sharedfile</tt>, the file will only be uninstalled when the reference count reaches zero.</p>
<p>To uninstall the file Uninstaller uses the strong assembly name specified by parameter <tt>StrongAssemblyName</tt>.</p>
<p>An exception will be raised if an attempt is made to use this flag on a system with no .NET Framework present.</p>
</dd>
<dt class="flaglist"><span id="ignoreversion">ignoreversion</span></dt>
<dd>
<p>Don't compare version info at all; replace existing files regardless of their version number.</p>
<p>This flag should only be used on files private to your application, <i>never</i> on shared system files.</p>
<p>This flag cannot be combined with <tt>replacesameversion</tt>.</p>
</dd>
<dt class="flaglist"><span id="issigverify">issigverify</span></dt>
<dd>
<p>Instructs the compiler or Setup to verify the source file's signature using a key from the <a href="topic_issigkeyssection.htm">[ISSigKeys] section</a>, allowing all keys by default. Use the <tt>ISSigAllowedKeys</tt> parameter to limit the allowed keys.</p>
<p>The verification requires an <tt>.issig</tt> signature file to be present in the same directory as the source file, created using the <a href="topic_issigtool.htm">Inno Setup Signature Tool</a>. If flag <tt>download</tt> is set then the <tt>.issig</tt> signature file will be downloaded instead. See the <tt>DownloadISSigSource</tt> parameter description for more information..</p>
<p>The precise effect of this flag depends on whether it is combined with the <tt>external</tt> flag:</p>
<ul>
<li>When used without the <tt>external</tt> flag, the compiler will verify the source file while it is being compressed/stored into the resulting installer. If the verification fails, compilation will abort.</li>
<li>When used with the <tt>external</tt> flag, Setup will verify the source file during the installation process while it is being copied to the destination directory. Files are always created with temporary names (<tt>*.tmp</tt>) initially. If the verification fails, the temporary file will be deleted and a "Verification of the source file failed" error message will be displayed to the user (with Skip, Try Again, and Cancel options) and a more detailed error is logged. If the verification succeeds, the temporary file will be renamed to the correct destination name.</li>
<li>When a file entry with the <tt>external</tt> flag is skipped (i.e., not installed - for example because the <tt>ignoreversion</tt> flag wasn't used), the source file isn't copied anywhere, so no verification takes place.</li>
</ul>
<p>Since verification occurs while source files are being compressed/copied, and not in a separate pass, each file's contents are only read once. Thus, enabling verification has little performance impact; the only extra I/O comes from reading the tiny <tt>.issig</tt> files. Only archives and downloaded files are read twice.</p>
<p>The verification process is protected against the Time-Of-Check to Time-Of-Use (TOCTOU) problem.</p>
<p>This flag cannot be combined with the <tt>sign</tt> or <tt>signonce</tt> flags. Use <tt>signcheck</tt> instead.</p>
</dd>
<dt class="flaglist"><span id="isreadme">isreadme</span></dt>
<dd>
<p>File is the "README" file. Only <i>one</i> file in an installation can have this flag. When a file has this flag, the user will be asked if they would like to view the README file after the installation has completed. If Yes is chosen, Setup will open the file, using the default program for the file type. For this reason, the README file should always end with an extension like .txt, .wri, or .doc.</p>
<p>Note that if Setup has to restart the user's computer (as a result of installing a file with the flag <tt>restartreplace</tt> or if the <tt>AlwaysRestart</tt> <tt>[Setup]</tt> section directive is <tt>yes</tt>), the user will not be given an option to view the README file.</p>
</dd>
<dt class="flaglist"><span id="nocompression">nocompression</span></dt>
<dd>
<p>Prevents the compiler from attempting to compress the file. Use this flag on file types that you know can't benefit from compression (for example, JPEG images) to speed up the compilation process and save a few bytes in the resulting installation.</p>
</dd>
<dt class="flaglist"><span id="noencryption">noencryption</span></dt>
<dd>
<p>Prevents the file from being stored encrypted. Use this flag if you have enabled encryption (using the [Setup] section directive <tt>Encryption</tt>) but want to be able to extract the file using the [Code] section support function <a href="topic_isxfunc_extracttemporaryfile.htm">ExtractTemporaryFile</a> before the user has entered the correct password.</p>
</dd>
<dt class="flaglist"><span id="noregerror">noregerror</span></dt>
<dd>
<p>When combined with either the <tt>regserver</tt> or <tt>regtypelib</tt> flags, Setup will not display any error message if the registration fails.</p>
</dd>
<dt class="flaglist"><span id="onlyifdestfileexists">onlyifdestfileexists</span></dt>
<dd>
<p>Only install the file if a file of the same name already exists on the user's system. This flag may be useful if your installation is a patch to an existing installation, and you don't want files to be installed that the user didn't already have.</p>
</dd>
<dt class="flaglist"><span id="onlyifdoesntexist">onlyifdoesntexist</span></dt>
<dd>
<p>Only install the file if it doesn't already exist on the user's system.</p>
</dd>
<dt class="flaglist"><span id="overwritereadonly">overwritereadonly</span></dt>
<dd>
<p>Always overwrite a read-only file. Without this flag, Setup will ask the user if an existing read-only file should be overwritten.</p>
</dd>
<dt class="flaglist"><span id="promptifolder">promptifolder</span></dt>
<dd>
<p>By default, when a file being installed has an older version number (or older time stamp, when the <tt>comparetimestamp</tt> flag is used) than an existing file, Setup will not replace the existing file. (See the <i>Remarks</i> section at the bottom of this topic for more details.) When this flag is used, Setup will ask the user whether the file should be replaced, with the default answer being to keep the existing file.</p>
</dd>
<dt class="flaglist"><span id="recursesubdirs">recursesubdirs</span></dt>
<dd>
<p>Instructs the compiler or Setup to also search for the <tt>Source</tt> filename/wildcard in subdirectories under the <tt>Source</tt> directory.</p>
</dd>
<dt class="flaglist"><span id="regserver">regserver</span></dt>
<dd>
<p>Register the DLL/OCX file. With this flag set, Setup will call the DllRegisterServer function exported by the DLL/OCX file, and the uninstaller will call DllUnregisterServer prior to removing the file. When used in combination with <tt>sharedfile</tt>, the DLL/OCX file will only be unregistered when the reference count reaches zero.</p>
<p>In <a href="topic_32vs64bitinstalls.htm">64-bit install mode</a>, the file is assumed to be a 64-bit image and will be registered inside a 64-bit process. You can override this by specifying the <tt>32bit</tt> flag.</p>
<p>See the <i>Remarks</i> at the bottom of this topic for more information.</p>
</dd>
<dt class="flaglist"><span id="regtypelib">regtypelib</span></dt>
<dd>
<p>Register the type library (.tlb). The uninstaller will unregister the type library (unless the flag <tt>uninsneveruninstall</tt> is specified). As with the <tt>regserver</tt> flag, when used in combination with <tt>sharedfile</tt>, the file will only be unregistered by the uninstaller when the reference count reaches zero.</p>
<p>In <a href="topic_32vs64bitinstalls.htm">64-bit install mode</a> running on an x64-compatible edition of Windows, the type library will be registered inside a 64-bit process. You can override this by specifying the <tt>32bit</tt> flag.</p>
<p>See the <i>Remarks</i> at the bottom of this topic for more information.</p>
</dd>
<dt class="flaglist"><span id="replacesameversion">replacesameversion</span></dt>
<dd>
<p>When this flag is used and the file already exists on the user's system and it has the same version number as the file being installed, Setup will compare the files and replace the existing file if their contents differ.</p>
<p>The default behavior (i.e. when this flag isn't used) is to not replace an existing file with the same version number.</p>
<p>This flag has no effect if combined with the <tt>extractarchive</tt> flag, or if used for a file that lacks a version number.</p>
<p>This flag cannot be combined with <tt>ignoreversion</tt>.</p>
</dd>
<dt class="flaglist"><span id="restartreplace">restartreplace</span></dt>
<dd>
<p>When an existing file needs to be replaced, and it is in use (locked) by another running process, Setup will by default display an error message. This flag tells Setup to instead register the file to be replaced the next time the system is restarted (by calling MoveFileEx or by creating an entry in WININIT.INI). When this happens, the user will be prompted to restart their computer at the end of the installation process.</p>
<p><b>NOTE:</b> This flag has no effect if the user does not have administrative privileges. Therefore, when using this flag, it is recommended that you leave the <a href="topic_setup_privilegesrequired.htm">PrivilegesRequired</a> [Setup] section directive at the default setting of <tt>admin</tt>.</p>
</dd>
<dt class="flaglist"><span id="setntfscompression">setntfscompression</span></dt>
<dd>
<p>Instructs Setup to enable NTFS compression on the file (even if it didn't replace the file). If it fails to set the compression state for any reason (for example, if compression is not supported by the file system), no error message will be displayed.</p>
</dd>
<dt class="flaglist"><span id="sharedfile">sharedfile</span></dt>
<dd>
<p>Specifies that the file is shared among multiple applications, and should only be removed at uninstall time if no other applications are using it. Most files installed to the Windows System directory should use this flag, including .OCX, .BPL, and .DPL files.</p>
<p>Windows' standard shared file reference-counting mechanism (located in the registry under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\SharedDLLs) is used to keep track of how many applications depend on the file. Each time the file is installed, the reference count for the file is incremented. (This happens regardless of whether the installer actually replaces the file on disk.) When an application using the file is uninstalled, the reference count is decremented. If the count reaches zero, the file is deleted (with the user's confirmation, unless the <tt>uninsnosharedfileprompt</tt> flag is also specified).</p>
<p>If Setup is run more than once, the reference count for the file will be incremented more than once. The uninstaller will decrement the reference count the same number of times, however, so no references are leaked (provided the <a href="topic_setup_uninstalllogmode.htm">UninstallLogMode</a> [Setup] section directive isn't changed from its default setting of <tt>append</tt>).</p>
<p>When this flag is used, do not specify <tt>{syswow64}</tt> in the <tt>DestDir</tt> parameter; use <tt>{sys}</tt> instead. Even though <tt>{sys}</tt> and <tt>{syswow64}</tt> map to the same underlying directory in <a href="topic_32vs64bitinstalls.htm">32-bit install mode</a>, the path name must exactly match what every other existing installer is using; otherwise, a second reference count for the file would be created, which could result in the file being removed prematurely. If you need to install a shared file to the 32-bit System directory in <a href="topic_32vs64bitinstalls.htm">64-bit install mode</a>, specify <tt>{sys}</tt> in the <tt>DestDir</tt> parameter and additionally include the <tt>32bit</tt> flag.</p>
</dd>
<dt class="flaglist"><span id="sign">sign</span></dt>
<dd>
<p>This flag instructs the compiler to digitally sign the original source files before storing them. Ignored if [Setup] section directive <a href="topic_setup_signtool.htm">SignTool</a> is not set.</p>
<p>This flag cannot be combined with the <tt>issigverify</tt> flag. Use <tt>signcheck</tt> instead.</p>
</dd>
<dt class="flaglist"><span id="signcheck">signcheck</span></dt>
<dd>
<p>This flag instructs the compiler to check the original source files for a digital signature before storing them.</p>
</dd>
<dt class="flaglist"><span id="signonce">signonce</span></dt>
<dd>
<p>This flag instructs the compiler to digitally sign the original source files before storing them, but only if the files are not already signed. Ignored if [Setup] section directive <a href="topic_setup_signtool.htm">SignTool</a> is not set.</p>
<p>This flag cannot be combined with the <tt>issigverify</tt> flag. Use <tt>signcheck</tt> instead.</p>
</dd>
<dt class="flaglist"><span id="skipifsourcedoesntexist">skipifsourcedoesntexist</span></dt>
<dd>
<p>This flag instructs the compiler -- or Setup, if the <tt>external</tt> flag is also used -- to silently skip over the entry if the source file does not exist, instead of displaying an error message.</p>
</dd>
<dt class="flaglist"><span id="solidbreak">solidbreak</span></dt>
<dd>
<p>When <a href="topic_setup_solidcompression.htm">solid compression</a> is enabled, this flag instructs the compiler to finalize the current compression stream and begin a new one before compressing the file(s) matched by <tt>Source</tt>. This allows Setup to seek to the file instantly without having to decompress any preceding files first. May be useful in a large, multi-component installation if you find too much time is being spent decompressing files belonging to components that weren't selected.</p>
</dd>
<dt class="flaglist"><span id="sortfilesbyextension">sortfilesbyextension</span></dt>
<dd>
<p>This flag instructs the compiler to compress the found files sorted by extension before it sorts by path name. This potentially decreases the size of Setup if <a href="topic_setup_solidcompression.htm">solid compression</a> is also used.</p>
</dd>
<dt class="flaglist"><span id="sortfilesbyname">sortfilesbyname</span></dt>
<dd>
<p>This flag instructs the compiler to compress the found files sorted by name before it sorts by path name. This potentially decreases the size of Setup if <a href="topic_setup_solidcompression.htm">solid compression</a> is also used. If <tt>sortfilesbyextension</tt> is also used, files are first sorted by extension.</p>
</dd>
<dt class="flaglist"><span id="touch">touch</span></dt>
<dd>
<p>This flag causes Setup to set the time/date stamp of the installed file(s) to that which is specified by the <a href="topic_setup_touchdate.htm">TouchDate</a> and <a href="topic_setup_touchtime.htm">TouchTime</a> [Setup] section directives.</p>
<p>This flag has no effect if combined with the <tt>external</tt> flag.</p>
</dd>
<dt class="flaglist"><span id="uninsnosharedfileprompt">uninsnosharedfileprompt</span></dt>
<dd>
<p>When uninstalling the shared file, automatically remove the file if its reference count reaches zero instead of asking the user. Must be combined with the <tt>sharedfile</tt> flag to have an effect.</p>
</dd>
<dt class="flaglist"><span id="uninsremovereadonly">uninsremovereadonly</span></dt>
<dd>
<p>When uninstalling the file, remove any read-only attribute from the file before attempting to delete it.</p>
</dd>
<dt class="flaglist"><span id="uninsrestartdelete">uninsrestartdelete</span></dt>
<dd>
<p>When this flag is used and the file is in use at uninstall time, the uninstaller will queue the file to be deleted when the system is restarted, and at the end of the uninstallation process ask the user if they want to restart. This flag can be useful when uninstalling things like shell extensions which cannot be programmatically stopped. Note that administrative privileges are required for this flag to have an effect.</p>
</dd>
<dt class="flaglist"><span id="uninsneveruninstall">uninsneveruninstall</span></dt>
<dd>
<p>Never remove the file. This flag can be useful when installing very common shared files that shouldn't be deleted under any circumstances, such as MFC DLLs.</p>
<p>Note that if this flag is combined with the <tt>sharedfile</tt> flag, the file will never be deleted at uninstall time but the reference count will still be properly decremented.</p>
</dd>
<dt class="flaglist"><span id="unsetntfscompression">unsetntfscompression</span></dt>
<dd>
<p>Instructs Setup to disable NTFS compression on the file (even if it didn't replace the file). If it fails to set the compression state for any reason (for example, if compression is not supported by the file system), no error message will be displayed.</p>
</dd>
</dl>

<div class="examplebox">
<div class="exampleheader">Example:</div>
<pre class="nomargin">Flags: isreadme</pre>
</div>

</dd>

</dl>

<p><b><a href="topic_componentstasksparams.htm">Components and Tasks Parameters</a></b></p>

<p><b><a href="topic_commonparams.htm">Common Parameters</a></b></p>

<h2 class="heading">Remarks</h2>

<p>If a file already exists on the user's system, it by default will be replaced according to the following rules:</p>
<ol>
<li>If the existing file is an older version than the file being installed (as determined by the files' version info), the existing file will be replaced.</li>
<li>If the existing file is the same version as the file being installed, the existing file will not be replaced, except if the <tt>replacesameversion</tt> flag is used and the content of the two files differs.</li>
<li>If the existing file is a newer version than the file being installed, or if the existing file has version info but the file being installed does not, the existing file will not be replaced.</li>
<li>If the existing file does not have version info, it will be replaced.</li>
</ol>
<p>Certain flags such as <tt>onlyifdoesntexist</tt>, <tt>ignoreversion</tt>, and <tt>promptifolder</tt> alter the aforementioned rules.</p>

<p>If Setup is unable to replace an existing file because it is in use by another process, it will make up to 4 additional attempts to replace the file, delaying one second before each attempt. If all attempts fail, an error message will be displayed.</p>

<p>Setup registers all files with the <tt>regserver</tt> or <tt>regtypelib</tt> flags as the last step of installation. However, if the <tt>[Setup]</tt> section directive <tt>AlwaysRestart</tt> is <tt>yes</tt>, or if there are files with the <tt>restartreplace</tt> flag, all files get registered on the next reboot (by creating an entry in Windows' <i>RunOnce</i> registry key).</p>

<p>When files with a .HLP extension (Windows help files) are uninstalled, the corresponding .GID and .FTS files are automatically deleted as well. Similarly, when a .CHM (HTML Help) file is deleted, any .CHW (generated index) file is automatically deleted.</p>

</div>
</body>
</html>
